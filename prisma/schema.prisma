// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  username          String           @unique
  email             String           @unique
  cpf               String?           @unique
  firstname         String?
  lastname          String?
  password          String
  role              UserRole         @default(candidate)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  email_verified_at DateTime?
  stripe_customer_id String?
  subscriptions     Subscription[]
  resumes           Resume[]
  payments          Payment[]
}

enum UserRole {
  candidate
  recruiter
  admin
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  price         Float
  slug          String         @unique
  billing_cycle BillingCycle
  analysis_limit Int
  features      Json
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())
  subscriptions Subscription[]
}

enum BillingCycle {
  monthly
  yearly
}

model Subscription {
  id                      Int       @id @default(autoincrement())
  user_id                 Int
  plan_id                 Int
  status                  SubscriptionStatus @default(active)
  start_date              DateTime
  end_date                DateTime?
  renewal_date            DateTime?
  stripe_subscription_id  String
  created_at              DateTime  @default(now())
  user                    User      @relation(fields: [user_id], references: [id])
  plan                    Plan      @relation(fields: [plan_id], references: [id])
  payments                Payment[]
}

enum SubscriptionStatus {
  active
  canceled
  expired
  pending
}

model Payment {
  id                Int          @id @default(autoincrement())
  user_id           Int
  subscription_id   Int
  amount            Float
  id_mercadopago    String        @unique
  currency          String        @default("BRL")
  status            String        
  payment_method    String
  qr_code           String?
  transaction_id    String
  created_at        DateTime      @default(now())
  user              User          @relation(fields: [user_id], references: [id])
  subscription      Subscription  @relation(fields: [subscription_id], references: [id])
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum PaymentMethod {
  credit_card
  pix
  boleto
}

model Resume {
  id            Int             @id @default(autoincrement())
  user_id       Int
  file_path     String
  file_name     String
  analysis_data Json?
  created_at    DateTime        @default(now())
  user          User            @relation(fields: [user_id], references: [id])
  analyses      ResumeAnalysis[]
}

model ResumeAnalysis {
  id           Int      @id @default(autoincrement())
  resume_id    Int
  score        Float
  strengths    String
  weaknesses   String
  suggestions  String
  keywords     Json
  funny_comment String
  roast_level  Int
  processed_at DateTime @default(now())
  resume       Resume   @relation(fields: [resume_id], references: [id])
}
